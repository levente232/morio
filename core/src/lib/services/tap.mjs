import { readFile, writeFile } from '#shared/fs'
import { ensureServiceCertificate } from '#lib/tls'
// Default hooks
import { defaultRecreateServiceHook, defaultRestartServiceHook } from './index.mjs'
// utils
import { utils } from '../utils.mjs'
import { autoGeneratedHeader } from './core.mjs'

/**
 * Service object holds the various lifecycle hook methods
 */
export const service = {
  name: 'tap',
  hooks: {
    /**
     * Lifecycle hook to determine whether the container is wanted
     *
     * @return {boolean} wanted - Wanted or not
     */
    wanted: () => {
      /*
       * Only run the tap service if any stream processors are loaded & enabled
       * FIXME: Handle dynamic loading of processors
       */
      if (isTapWanted()) {
        ensureLocalPrerequisites()
        return true
      }

      return false
    },
    /*
     * Lifecycle hook to determine whether to recreate the container
     * We just reuse the default hook here, checking for changes in
     * name/version of the container.
     */
    recreate: () => defaultRecreateServiceHook('tap'),
    /**
     * Lifecycle hook to determine whether to restart the container
     * We just reuse the default hook here, checking whether the container
     * was recreated or is not running.
     */
    restart: (hookParams) => defaultRestartServiceHook('tap', hookParams),
    /**
     * Lifecycle hook for anything to be done prior to creating the container
     *
     * Write out the heartbeat.yml file as it will be volume-mapped,
     * so we need to write it to disk first so it's available
     */
    precreate: ensureLocalPrerequisites,
  },
}

async function ensureLocalPrerequisites() {
  /*
   * Generate key and certificate for mTLS
   * (this will only renew the cert if it's missing or old
   */
  await ensureServiceCertificate('tap', false)

  /*
   * Generate the tap config file
   */
  const config = {
    clientId: 'morio-tap',
    brokers: [`${utils.getNodeFqdn()}:${utils.getPreset('MORIO_BROKER_KAFKA_API_EXTERNAL_PORT')}`],
    ssl: {
      rejectUnauthorized: false,
      ca: [await readFile('/etc/morio/tap/tls-ca.pem')],
      key: await readFile('/etc/morio/tap/tls-key.pem'),
      cert: await readFile('/etc/morio/tap/tls-cert.pem'),
    },
  }

  /*
   * Write the tap config file to disk
   */
  await writeFile(
    `/etc/morio/tap/tap.mjs`,
    [
      autoGeneratedHeader,
      '// Tap config',
      `export const config = ${JSON.stringify(config, null, 2)}`,
      '',
      '// Node info',
      `export const node = ${JSON.stringify(
        {
          ...utils.getNode(),
          cluster: utils.getClusterFqdn(),
        },
        null,
        2
      )}`,
    ].join('\n')
  )

  return
}

/**
 * Helper method to determine whether the tap service is wanted
 *
 * @return {bool} wanted - True if wanted, false if not
 */
export function isTapWanted() {
  const processors = utils.getSettings('tap', {})

  return Object.keys(processors).length > 0
}
