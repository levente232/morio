import { readFile, writeFile } from '#shared/fs'
import { ensureServiceCertificate } from '#lib/tls'
// Default hooks
import { defaultRecreateServiceHook, defaultRestartServiceHook } from './index.mjs'
// log & utils
import { log, utils } from '../utils.mjs'
import { autoGeneratedHeader } from './core.mjs'

/**
 * Service object holds the various lifecycle hook methods
 */
export const service = {
  name: 'tap',
  hooks: {
    /**
     * Lifecycle hook to determine whether the container is wanted
     *
     * @return {boolean} wanted - Wanted or not
     */
    wanted: () => {
      /*
       * Only run the tap service if any stream processors are loaded & enabled
       * FIXME: Handle dynamic loading of processors
       */
      if (isTapWanted()) {
        ensureLocalPrerequisites()
        return true
      }

      return false
    },
    /*
     * Lifecycle hook to determine whether to recreate the container
     * We just reuse the default hook here, checking for changes in
     * name/version of the container.
     */
    recreate: () => defaultRecreateServiceHook('tap'),
    /**
     * Lifecycle hook to determine whether to restart the container
     * We just reuse the default hook here, checking whether the container
     * was recreated or is not running.
     */
    restart: (hookParams) => defaultRestartServiceHook('tap', hookParams),
    /**
     * Lifecycle hook for anything to be done prior to creating the container
     *
     * Write out the heartbeat.yml file as it will be volume-mapped,
     * so we need to write it to disk first so it's available
     */
    precreate: ensureLocalPrerequisites,
  },
}

async function ensureLocalPrerequisites() {
  const promises = []

  /*
   * Grab the tap serial from disk
   */
  const tapSerial = await getTapSerial()
  const settingsSerial = utils.getSettingsSerial()
  const age = Math.floor((Date.now() - tapSerial) / (1000 * 3600 * 24)) // in days

  /*
   * Generate key and certificate for mTLS
   * Certificates expire, but service certificates have a pretty long lifetime
   * So unless age climbs above 120 days, we do nothing.
   */
  if (!tapSerial || age > 120) promises.push(ensureServiceCertificate('tap', false))

  /*
   * If the serial is current, we do not need to re-create the config and restart the container
   */
  if (tapSerial === settingsSerial) {
    log.debug(`[tap] Serial on disk is current. Not updating config`)
    // FIXME
    //return
  }

  /*
   * And write the new serial to disk
   */
  promises.push(writeFile(`/etc/morio/tap/serial`, `${settingsSerial}`, log))

  /*
   * Generate the tap config file
   */
  const config = {
    clientId: 'morio-tap',
    brokers: [`${utils.getNodeFqdn()}:${utils.getPreset('MORIO_BROKER_KAFKA_API_EXTERNAL_PORT')}`],
    ssl: {
      rejectUnauthorized: false,
      ca: [await readFile('/etc/morio/tap/tls-ca.pem')],
      key: await readFile('/etc/morio/tap/tls-key.pem'),
      cert: await readFile('/etc/morio/tap/tls-cert.pem'),
    },
  }

  /*
   * Write the tap config file to disk
   */
  promises.push(
    writeFile(
      `/etc/morio/tap/tap.mjs`,
      [
        autoGeneratedHeader,
        '// Tap config',
        `export const config = ${JSON.stringify(config, null, 2)}`,
        '',
        '// Node info',
        `export const node = ${JSON.stringify(
          {
            ...utils.getNode(),
            cluster: utils.getClusterFqdn(),
          },
          null,
          2
        )}`,
      ].join('\n')
    )
  )

  await Promise.all(promises)

  return
}

/**
 * Helper method to determine whether the tap service is wanted
 *
 * @return {bool} wanted - True if wanted, false if not
 */
export function isTapWanted() {
  const processors = utils.getSettings('tap', {})

  return Object.keys(processors).length > 0
}

/**
 * Helper method to read the tap serial from disk
 *
 * @return {bool} current - True if the serial is current, false if not
 */
async function getTapSerial() {
  const serial = await readFile('/etc/morio/tap/serial')

  return serial ? Number(serial) : false
}
