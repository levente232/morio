// VARS

/*
 * A helper var to include a linebreak
 */
export const nl = '\n'

// METHODS

/**
 * Generates a logstash input configuration for a simple key => value plugin
 *
 * @param {object} input - The input configuration
 * @param {object} pipeline - The pipeline configuration
 * @param {string} pipelineId - The pipeline ID
 * @param {string} plugin - The plugin in case it differs from input.plugin
 * @return {string} lscl - The LSCL code
 */
export function baseInput(input, pipeline, pipelineId, plugin=false) {
  return baseXput('input', input, pipeline, pipelineId, plugin)
}

/**
 * Generates a logstash output configuration for a simple key => value plugin
 *
 * @param {object} output - The output configuration
 * @param {object} pipeline - The pipeline configuration
 * @param {string} pipelineId - The pipeline ID
 * @param {string} plugin - The plugin in case it differs from input.plugin
 * @return {string} lscl - The LSCL code
 */
export function baseOutput(output, pipeline, pipelineId, plugin=false) {
  return baseXput('output', output, pipeline, pipelineId, plugin)
}

/**
 * Generates LSCL for a base pipeline plugin
 *
 * @param {string} plugin - the morio plugin name
 * @param {object} xput - the xput configuration
 * @param {object} pipeline - the pipeline configuration
 * @param {string} pipelineId - the pipeline ID
 * @param {string} type - one of 'input' or 'output'
 * @return {string} config - the xput configuration
 */
function basePluginLscl(plugin, xput, pipeline, pipelineId, type) {
  let config = ''
  for (const [key, val] of Object.entries(xput)) {
    if (!['id', 'type', 'plugin', 'about'].includes(key)) {
      config += `\n    ${key} => ${JSON.stringify(val)}`
    }
    if (key === 'id') config += `\n    ${key} => ${JSON.stringify(pipelineId + '_' + type + '_' + val)}`
  }

  if (pipeline && type === 'output') {
    if (plugin === 'morio_local') {
      config += `\n    topic => ${JSON.stringify(pipeline.output.topic)}`
    }
  }

  return config + '\n'
}

/**
 * Generates a logstash xput configuration for a simple key => value plugin
 *
 * xput can be either input or output, based on the type passed.
 *
 * @param {string} type - One of 'input' or 'output' (or even 'filter')
 * @param {object} xput - The xput configuration
 * @param {object} pipeline - The pipeline configuration
 * @param {string} pipelineID - The pipeline ID
 * @param {string} plugin - The plugin in case it differs from input.plugin
 * @return {string} lscl - The LSCL code
 */
export function baseXput(type, xput, pipeline, pipelineId, plugin=false) {
  if (plugin === false) plugin = xput.plugin

  return plugin ? `
# A pipeline ${type} using the ${plugin} plugin
# Configuration generated by Morio's base logstash handler
${type} {
  ${plugin} { ${basePluginLscl(plugin, xput, pipeline, pipelineId, type)}  }
}
` : `
# Cannot determine the plugin
# Not generating a configuration
# Problematic config is: ${JSON.stringify(xput)}
`
}

/**
 * Add configuration for a boolean field
 *
 * @param {string} field - The field name
 * @param {object} data - The plugin/pipeline config
 * @param {mixed} dflt - The default value if the field is not in data
 * @return {string} cfg - The config snippet for this boolean field
 */
export function boolField(field, data, dflt) {
  return typeof data[field] !== 'undefined'
    ? `    ${field} => ${data[field] ? 'true' : 'false'}${nl}`
    : `    ${field} => ${dflt ? 'true' : 'false'}${nl}`
}

/**
 * Add configuration for a number field
 *
 * @param {string} field - The field name
 * @param {object} data - The plugin/pipeline config
 * @param {mixed} dflt - The default value if the field is not in data
 * @return {string} cfg - The config snippet for this number field
 */
export function numberField(field, data, dflt) {
  return typeof data[field] !== 'undefined'
    ? `    ${field} => ${Number(data[field])}${nl}`
    : `    ${field} => ${Number(dflt)}${nl}`
}

/**
 * Add configuration for a file field
 *
 * @param {string} field - The field name
 * @param {object} data - The plugin/pipeline config
 * @param {mixed} dflt - The default value if the field is not in data
 * @return {string} cfg - The config snippet for this number field
 */
export function fileField(field, data, pipelineId, list = false) {
  return typeof data[field] !== 'undefined'
    ? `    ${field} => ${list ? '[' : ''}"/usr/share/logstash/config/pipeline_assets/${pipelineId}_${field}"${list ? ']' : ''}${nl}`
    : ``
}

/**
 * Add configuration for a string field
 *
 * @param {string} field - The field name
 * @param {object} data - The plugin/pipeline config
 * @param {mixed} dflt - The default value if the field is not in data
 * @return {string} cfg - The config snippet for this string field
 */
export function stringField(field, data, dflt) {
  return typeof data[field] !== 'undefined' && data[field] !== ''
    ? `    ${field} => ${String(data[field])}${nl}`
    : dflt === undefined
      ? ``
      : `    ${field} => ${String(dflt)}${nl}`
}


