import fs from 'fs/promises'
import path from 'path'
import { glob } from 'glob'
import axios from 'axios'

/*
 * Add a banner to clarify where this code comes from
 */
const banner = `/*
 * This file is auto-generated by Morio core.
 * Any manual changes will be lost.
 */`

// Whitespace to re-use
const nl = "\n"
const tab = "  "

/*
 * Helper function to glob a folder
 */
export async function globDir(folderPath, pattern = '*/index.mjs') {
  let list = []
  try {
    list = await glob(path.resolve(folderPath) + '/' + pattern)
  } catch (err) {
    if (err) console.log(err)
    return false
  }

  return list
}

async function loadProcessorFiles(directory, pattern) {
  const folder = new URL(directory, import.meta.url)

  return await globDir(folder.pathname, pattern)
}

function asTopicList (input) {
  if (typeof input === 'string') return [input]
  if (Array.isArray(input)) return input
  if (typeof input === 'object') return Object.values(input)

  return []
}

async function ensureProcessorLoader(settings) {
  const files = await loadProcessorFiles('./processors')
  const imports = {}
  const topics = new Set()
  for (const file of files) {
    const processor = path.basename(path.dirname(file))
    if (settings.tap?.[processor]?.enabled) {
      const subs = asTopicList(settings.tap?.[processor]?.topics || [])
      for (const topic of subs) topics.add(topic)
      imports[processor] = [ processor, subs ]
    }
  }

  /*
   * Holds import code
   */
  let imp = `${banner}${nl}
// We need a logger
import { log } from './src/tools.mjs'

// Stream processors`

  /*
   * Holds allProcessors code
   */
  let ah = `${nl}${nl}/*${nl} * Simple object with all stream processors${nl} */${nl}export const allProcessors = {`

  const hpts = {}
  for (const folder of Object.keys(imports).sort()) {
    imp += `${nl}import ${folder} from './processors/${folder}/index.mjs'`
    for (const topic of imports[folder][1]) {
      if (typeof hpts[topic] === 'undefined') hpts[topic] = new Set()
      hpts[topic].add(folder)
    }
    ah += `${nl}  ${folder}, `
  }

  ah += `${nl}}${nl}`

  /*
   * Holds processorsPerTopic code
   */
  let hpt = `${nl}/*${nl} * Same stream processors but grouped by topic${nl} */${nl}export const processorsPerTopic = {`
  for (const [topic, processors] of Object.entries(hpts)) {
    hpt += `${nl}  ${topic}: [`
    for (const h of [...processors]) {
      if (Array.isArray(h)) {
        for (const hh of h) hpt += `${nl}    allProcessors.${hh},`
      }
      else hpt += `${nl}    allProcessors.${h},`
    }
    hpt += `${nl}  ],`
  }
  hpt += `${nl}}`

  /*
   * Now bring it all together and write to disk
   */
  const code = `${imp}${ah}${hpt}${nl}
export const topics = ${JSON.stringify([...topics])}
export const processorList = []
for (const topic in processorsPerTopic) {
  for (const proc of processorsPerTopic[topic])
  processorList.push(proc.name)
}
`
  await fs.writeFile('./loader.mjs', code)
}

async function ensureModuleLoaders(settings) {
  const files = await loadProcessorFiles('./processors', '*/modules/*.mjs')
  const imports = {}
  for (const file of files) {
    /*
     * We glob all files in one pass,
     * but we need to manage them per processor
     */
    const processor = path.basename(path.dirname(path.dirname(file)))
    if (typeof imports[processor] === 'undefined') imports[processor] = {}
    const filename = path.basename(file)
    if (filename.slice(-4) === '.mjs') {
      const module = filename.slice(0,-4)
      if (module !== 'index') {
        const importName = module.replaceAll('-', '_')
        imports[processor][module] = {
          imp: `import ${importName} from './${filename}'`,
          exp: `  "${module}": ${importName},`
        }
      }
    }
  }

  /*
   * Now write out the index.mjs loader files
   */
  for (const processor in imports) {
    const code = `${banner}
${Object.values(imports[processor]).map(h => h.imp).join(nl)}${nl}
export default {${nl}${Object.values(imports[processor]).map(h => h.exp).join(nl)}${nl}}${nl}`
    await fs.writeFile(`./processors/${processor}/modules/index.mjs`, code)
  }
}

/*
 * This loads the settings from core over the internal docker network
 */
async function loadSettings (settings) {
  let result
  try {
    result = await axios.get(`http://morio-core:3007/settings`)
  }
  catch(err) {
    console.log(`Failed to load settings from core`, err)
  }

  return result?.data
    ? result.data
    : false
}

/*
 * Get to work
 */
const settings = await loadSettings()
if (settings) {
  await fs.writeFile('./settings.mjs', `${banner}${nl}export const settings = ${JSON.stringify(settings)}`)

  ensureProcessorLoader(settings)
  ensureModuleLoaders(settings)
} else {
  console.log(`Core did not provide settings. Tap service cannot start.`)
}

