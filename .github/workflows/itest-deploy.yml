name: Deploy and Configure Morio

on:
  workflow_dispatch: # Allow manual triggering for a test
  issue_comment:
    types: [created] # Trigger when a comment is created on a PR

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout PR Code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha || github.event.issue.pull_request.head.sha }}

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Initialize Comment
        id: create_comment
        run: |
          COMMENT_BODY="{ \"body\": \"| Step | Status |\\n|------|--------|\\n| Initialize Workflow |\" }"
          COMMENT_RESPONSE=$(curl -s -X POST \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github+json" \
            -d "$COMMENT_BODY" \
            https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.issue.number }}/comments)
          COMMENT_ID=$(echo "$COMMENT_RESPONSE" | jq -r .id)
          echo "COMMENT_ID=$COMMENT_ID" >> $GITHUB_ENV

      - name: Update Comment Function
        id: update_comment
        run: |
          update_comment() {
            STEP_NAME="$1"
            STATUS="$2"

            # Define the icons for each status
            case "$STATUS" in
              "Pending") ICON="⏳" ;;
              "Success") ICON="✅" ;;
              "Fail") ICON="❌" ;;
              *) ICON="⏳" ;; # Default to Pending if status is unrecognized
            esac

            # Fetch the current comment body
            COMMENT_BODY=$(curl -s -X GET \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github+json" \
              https://api.github.com/repos/${{ github.repository }}/issues/comments/${COMMENT_ID} | jq -r .body)

            # Add or update the step's status with the icon
            if echo "$COMMENT_BODY" | grep -q "| $STEP_NAME |"; then
              # Update existing step
              UPDATED_BODY=$(echo "$COMMENT_BODY" | sed "s/| $STEP_NAME |.*|/| $STEP_NAME | $ICON $STATUS |/")
            else
              # Append a new step
              UPDATED_BODY=$(echo -e "$COMMENT_BODY\\n| $STEP_NAME | $ICON $STATUS |")
            fi

            # Update the comment on GitHub
            curl -s -X PATCH \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github+json" \
              -d "{\"body\": \"$UPDATED_BODY\"}" \
              https://api.github.com/repos/${{ github.repository }}/issues/comments/${COMMENT_ID} > /dev/null
          }

          # Export the function to be used in subsequent steps
          export -f update_comment

      - name: Check if Comment Matches Deploy Key and User is Allowed
        id: check_trigger
        run: |
          echo "Checking deploy key and allowed users..."

          # Initialize match to false
          echo "match=false" >> $GITHUB_ENV

          # Ensure the event is triggered for a pull request
          if [[ "${{ github.event.issue.pull_request }}" == "" ]]; then
            echo "Not a pull request. Proceeding with PR_ID=32 for manual testing."
          else
            ALLOWED_USERS=$(cat allowed_users.txt)
            COMMENT_BODY="${{ github.event.comment.body }}"
            COMMENT_USER="${{ github.event.comment.user.login }}"
            ITEST_DEPLOY_TRIGGER="${{ vars.ITEST_DEPLOY_TRIGGER }}"

            if [[ "$COMMENT_BODY" == *"$ITEST_DEPLOY_TRIGGER"* && "$ALLOWED_USERS" == *"$COMMENT_USER"* ]]; then
              echo "match=true" >> $GITHUB_ENV
            fi
          fi
        env:
          ITEST_DEPLOY_TRIGGER: ${{ vars.ITEST_DEPLOY_TRIGGER }}

      - name: Exit if Not Triggered by Allowed User or Matching Deploy Key
        if: ${{ env.match != 'true' }}
        run: echo "Comment does not match deploy key or user is not allowed. Exiting..."
        continue-on-error: true

      - name: Set PR ID as Environment Variable
        run: |
          if [ "${{ github.event.pull_request.number }}" ]; then
            echo "PR_ID=${{ github.event.pull_request.number }}" >> $GITHUB_ENV
          else
            echo "PR_ID=32" >> $GITHUB_ENV
          fi

      - name: Configure AWS CLI
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set region eu-central-1
          aws configure set output json

      - name: Install Python Dependencies for Ansible
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-pip
          pip3 install --upgrade pip
          pip3 install boto3 botocore

      - name: Verify Python Version
        run: python3 --version

      - name: Verify boto3 and botocore installation
        run: |
          python3 -c "import boto3; print(boto3.__version__)"
          python3 -c "import botocore; print(botocore.__version__)"

      - name: Install Ansible
        run: sudo apt-get install -y ansible

      - name: Create Inventory File
        run: |
          echo "[localhost]" > inventory
          echo "127.0.0.1 ansible_python_interpreter=$(which python3)" >> inventory

      - name: Install required Ansible collections
        run: ansible-galaxy collection install amazon.aws community.general

      - name: Install Node.js dependencies
        run: |
          npm install
          npm install dotenv

      - name: Generate SSH Key Pair
        run: |
          mkdir -p ~/.ssh
          ssh-keygen -t rsa -b 4096 -f ~/.ssh/id_rsa -N ""
          echo "SSH Key Pair generated and stored in ~/.ssh/id_rsa"

      - name: Run ideploy (Deploy to the environment)
        run: |
          # Update comment with Pending status for this step
          update_comment "Deploy to Environment" "Pending"

          # Run the deployment command
          if npm run ideploy; then
            # If the deployment is successful, update the comment with Success
            update_comment "Deploy to Environment" "Success"
          else
            # If the deployment fails, update the comment with Fail
            update_comment "Deploy to Environment" "Fail"
            exit 1  # Exit the job if it fails
          fi
        env:
          PR_ID: ${{ env.PR_ID }}
          ITEST_AWS_SUBNET_ID: ${{ secrets.ITEST_AWS_SUBNET_ID }}
          ITEST_AWS_SECURITY_GROUP_ID: ${{ secrets.ITEST_AWS_SECURITY_GROUP_ID }}
          ITEST_AWS_ROUTE53_ZONE_ID: ${{ secrets.ITEST_AWS_ROUTE53_ZONE_ID }}
          ITEST_AWS_DEBIAN12_AMI_ID: ${{ secrets.ITEST_AWS_DEBIAN12_AMI_ID }}
          ITEST_AWS_SSH_PUBKEY_1: ${{ secrets.AWS_SSH_PUBKEY_1 }}
          ITEST_AWS_SSH_PUBKEY_2: ${{ secrets.AWS_SSH_PUBKEY_2 }}

      - name: Run isetup (Deploy and setup with SSH retry)
        run: |
          # Update comment with Pending status for this step
          update_comment "Deploy and Setup with SSH Retry" "Pending"

          # Start retry logic
          for i in {1..10}; do
            if npm run isetup; then
              # If the setup is successful, update the comment with Success and exit loop
              update_comment "Deploy and Setup with SSH Retry" "Success"
              break
            else
              # If SSH fails, log retry and update comment status as Pending
              echo "SSH authentication failed. Retrying in 10 seconds... ($i/10)"
              update_comment "Deploy and Setup with SSH Retry" "Pending"
              sleep 10
            fi
          done

          # If all retries fail, update the comment with Fail and exit the job
          if [ $i -eq 10 ]; then
            update_comment "Deploy and Setup with SSH Retry" "Fail"
            echo "SSH authentication failed after 10 attempts. Exiting."
            exit 1
          fi

      - name: Wait for 30 seconds
        run: sleep 30

      - name: Run itest (Testing)
        run: |
          # Update comment with Pending status for this step
          update_comment "Testing" "Pending"

          # Run the test command
          if npm run itest ephemeral; then
            # If successful, update the comment with Success
            update_comment "Testing" "Success"
          else
            # If failed, update the comment with Fail
            update_comment "Testing" "Fail"
            exit 1
          fi

      - name: Run setup configure (with test)
        run: |
          # Update comment with Pending status for this step
          update_comment "Setup Configure" "Pending"

          # Run the setup command
          if npm run itest setup; then
            # If successful, update the comment with Success
            update_comment "Setup Configure" "Success"
          else
            # If failed, update the comment with Fail
            update_comment "Setup Configure" "Fail"
            exit 1
          fi

      - name: Wait for 30 seconds
        run: sleep 30

      - name: Run account create test
        run: |
          # Update comment with Pending status for this step
          update_comment "Account Create Test" "Pending"

          # Run the account create test command
          if npm run itest create; then
            # If successful, update the comment with Success
            update_comment "Account Create Test" "Success"
          else
            # If failed, update the comment with Fail
            update_comment "Account Create Test" "Fail"
            exit 1
          fi

      - name: Run anonymous test
        run: |
          # Update comment with Pending status for this step
          update_comment "Anonymous Test" "Pending"

          # Run the anonymous test command
          if npm run itest anonymous; then
            # If successful, update the comment with Success
            update_comment "Anonymous Test" "Success"
          else
            # If failed, update the comment with Fail
            update_comment "Anonymous Test" "Fail"
            exit 1
          fi

      - name: Run settings test
        run: |
          # Update comment with Pending status for this step
          update_comment "Settings Test" "Pending"

          # Run the settings test command
          if npm run itest settings; then
            # If successful, update the comment with Success
            update_comment "Settings Test" "Success"
          else
            # If failed, update the comment with Fail
            update_comment "Settings Test" "Fail"
            exit 1
          fi

      - name: Run docker test
        run: |
          # Update comment with Pending status for this step
          update_comment "Docker Test" "Pending"

          # Run the docker test command
          if npm run itest docker; then
            # If successful, update the comment with Success
            update_comment "Docker Test" "Success"
          else
            # If failed, update the comment with Fail
            update_comment "Docker Test" "Fail"
            exit 1
          fi

      - name: Run idp-local test
        run: |
          # Update comment with Pending status for this step
          update_comment "IDP Local Test" "Pending"

          # Run the idp-local test command
          if npm run itest local; then
            # If successful, update the comment with Success
            update_comment "IDP Local Test" "Success"
          else
            # If failed, update the comment with Fail
            update_comment "IDP Local Test" "Fail"
            exit 1
          fi

      - name: Run idp-apikey test
        run: |
          # Update comment with Pending status for this step
          update_comment "IDP API Key Test" "Pending"

          # Run the idp-apikey test command
          if npm run itest apikey; then
            # If successful, update the comment with Success
            update_comment "IDP API Key Test" "Success"
          else
            # If failed, update the comment with Fail
            update_comment "IDP API Key Test" "Fail"
            exit 1
          fi

      - name: Run idp-mrt test
        run: |
          # Update comment with Pending status for this step
          update_comment "IDP MRT Test" "Pending"

          # Run the idp-mrt test command
          if npm run itest mrt; then
            # If successful, update the comment with Success
            update_comment "IDP MRT Test" "Success"
          else
            # If failed, update the comment with Fail
            update_comment "IDP MRT Test" "Fail"
            exit 1
          fi

      - name: Run crypto test
        run: |
          # Update comment with Pending status for this step
          update_comment "Crypto Test" "Pending"

          # Run the crypto test command
          if npm run itest crypto; then
            # If successful, update the comment with Success
            update_comment "Crypto Test" "Success"
          else
            # If failed, update the comment with Fail
            update_comment "Crypto Test" "Fail"
            exit 1
          fi

      - name: Run kv test
        run: |
          # Update comment with Pending status for this step
          update_comment "KV Test" "Pending"

          # Run the kv test command
          if npm run itest kv; then
            # If successful, update the comment with Success
            update_comment "KV Test" "Success"
          else
            # If failed, update the comment with Fail
            update_comment "KV Test" "Fail"
            exit 1
          fi

      - name: Run idestroy (Destroy resources)
        run: |
          # Update comment with Pending status for this step
          update_comment "Destroy Resources" "Pending"

          # Run the idestroy command
          if npm run idestroy; then
            # If successful, update the comment with Success
            update_comment "Destroy Resources" "Success"
          else
            # If failed, update the comment with Fail
            update_comment "Destroy Resources" "Fail"
            exit 1
          fi

      - name: Final Status Update
        run: |
          # Determine the final status based on the workflow result
          if [ "${{ job.status }}" == "success" ]; then
            FINAL_STATUS="Success"
          else
            FINAL_STATUS="Fail"
          fi

          # Call the update_comment function to update the final status
          update_comment "Final Status" "$FINAL_STATUS"
